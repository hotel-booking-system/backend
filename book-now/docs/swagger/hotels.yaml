openapi: 3.0.3
info:
  title: 'API Hotel Booking System'
  description: |-
    #  API para gerenciar hotéis em um sistema de reservas.
    
    ## Objetivo
    
    Esta API fornece uma interface para gerenciar hotéis em um sistema de reservas. Ela permite que você realize 
    operações CRUD (Create, Read, Update, Delete) em hotéis.
    
    ## Público-alvo
    
    Desenvolvedores que desejam integrar funcionalidades de gerenciamento de hotéis em seus sistemas de reservas.
    
    ## Recursos
    
    - **Listar:** Buscar todos os hotéis cadastrados no sistema.
    - **Buscar:** Obter informações detalhadas de um hotel específico por meio do seu ID.
    - **Cadastrar:** Criar um novo hotel no sistema.
    - **Atualizar:** Editar os dados de um hotel já cadastrado.
    - **Excluir:** Remover um hotel do sistema.
    
    ### Modelo de Dados
    
    - `HotelRequest`: Modelo para requisições de criação e atualização de hotéis.
    - `HotelResponse`: Modelo para resposta com os dados do hotel.
    - `HotelType`: Enumeração com os tipos de hotéis (HOTEL, RESORT, HOSTEL, etc.).
    
    ### Validação de Dados
    
    - Validação de campos obrigatórios e formatos de dados.
    - Verificação de CNPJ e email válidos.
    
    ### Respostas padronizadas
    
    - Códigos de status HTTP para indicar o sucesso ou falha da operação.
    - Mensagens de erro descritivas em português.
    
    ## Funcionalidades
    
    - **Gerenciamento completo de hotéis:** A API oferece endpoints para realizar todas as operações CRUD em hotéis, 
    permitindo um controle completo sobre os dados dos hotéis no sistema de reservas.
    - **Detalhes do hotel:** A API fornece informações detalhadas sobre cada hotel, como nome, localização, tipo, 
    contato, descrição, quantidade de quartos e data de criação/atualização.
    - **Validação de dados:** A API garante a qualidade dos dados inseridos no sistema, realizando validações de 
    formato, tamanho e conteúdo para cada campo.
    - **Respostas em português:** As mensagens de erro e sucesso da API são em português, facilitando a compreensão e o 
    uso da API por desenvolvedores brasileiros.
    
    ## Benefícios
    
    - **Agilidade:** A API automatiza o processo de gerenciamento de hotéis, reduzindo o tempo e o esforço manual 
    necessário para realizar tarefas como cadastro, atualização e exclusão de hotéis.
    - **Precisão:** A validação de dados garante a qualidade e confiabilidade das informações armazenadas no sistema 
    de reservas.
    - **Acessibilidade:** A API oferece uma interface padronizada para acesso aos dados dos hotéis, facilitando a 
    integração com outros sistemas e aplicações.
    - **Escalabilidade:** A API é projetada para ser escalável, suportando o aumento no número de hotéis e reservas 
    no sistema.
    
    ## Utilização
    
    Esta API pode ser utilizada por desenvolvedores que desejam integrar funcionalidades de gerenciamento de hotéis 
    em seus sistemas de reservas. A API é fornecida em formato OpenAPI, facilitando a integração com diversas 
    linguagens de programação e frameworks.
    
    ## Recursos Adicionais
    
    - **Documentação completa:** A API possui documentação detalhada em português, com exemplos de requisições e 
    respostas, facilitando o aprendizado e uso da API.

  version: 1.0.0
servers:
  - url: 'http:localhost:8585/api/v1/hotels'
tags:
  - name: hotel
    description: 'Operações relacionadas a hotéis'
paths:
  /register:
    post:
      tags:
        - hotel
      summary: 'Cadastrar um novo hotel'
      description: 'Cria um novo hotel no sistema.'
      operationId: registerHotel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotelRequest'
      responses:
        '201':
          description: 'Hotel criado com sucesso.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterHotelResponse'
        '400':
          description: 'Erro na requisição.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 'Acesso não autorizado.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 'CNPJ já cadastrado no sistema.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Erro interno no servidor.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /list:
    get:
      tags:
        - hotel
      summary: 'Lista todos os hotéis cadastrados no sistema.'
      description: 'Retorna uma lista de objetos `RegisterHotelResponse` com os dados dos hotéis.'
      operationId: listHotels
      responses:
        '200':
          description: 'Lista de quartos retornada com sucesso'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegisterHotelResponse'
        '404':
          description: 'Recurso não encontrado.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Erro interno no servidor.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /{id}:
    get:
      tags:
        - hotel
      summary: 'Busca um hotel por ID'
      description: 'Retorna um objeto HotelResponse com os dados do hotel especificado pelo ID.'
      operationId: getHotelById
      parameters:
        - name: id
          in: path
          required: true
          description: 'Identificador único do hotel'
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Hotel encontrado com sucesso.'
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterHotelResponse'
        '404':
          description: 'Hotel não encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Erro interno no servidor.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - hotel
      summary: 'Atualizar um quarto por ID'
      description: |-
        Recebe um objeto `HotelRequest` como payload e atualiza os dados do hotel especificado pelo ID.
        Retorna um objeto `HotelResponse` com os dados do hotel atualizado.
      operationId: updateHotelById
      parameters:
        - name: id
          in: path
          required: true
          description: 'Identificador único do hotel'
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotelRequest'
      responses:
        '204':
          description: 'Quarto atualizado com sucesso.'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/RegisterHotelResponse'
        '404':
          description: 'Quarto não encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Erro interno no servidor.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - hotel
      summary: 'Excluir um quarto por ID'
      description: ' Exclui o hotel especificado pelo ID. Retorna um código de status 204 se a exclusão for bem-sucedida.'
      operationId: deleteHotelById
      parameters:
        - name: id
          in: path
          required: true
          description: 'Identificador único do hotel'
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 'Hotel excluído com sucesso.'
        '404':
          description: 'Hotel não encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Erro interno no servidor.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    HotelRequest:
      type: object
      required:
        - hotelName
        - location
        - phoneNumber
        - email
        - hotelType
        - cnpjNumber
        - description
        - roomCount
      properties:
        hotelName:
          type: string
          minLength: 3
          example: "Hotel Atlântico"
          description: 'Nome do hotel'
        location:
          type: string
          minLength: 10
          example: "Rua Jaime Rodrigues, 123, Jd Cachoeira"
          description: 'Localização do hotel'
        phoneNumber:
          type: string
          pattern: "^\\+?\\d{4,15}$"
          example: "+5511999998888"
          description: 'Número de telefone do hotel'
        email:
          type: string
          format: email
          example: "contato@hotelatlantico.com.br"
          description: 'Email do hotel'
        hotelType:
          $ref: '#/components/schemas/HotelType'
        cnpjNumber:
          type: string
          pattern: "^\\d{14}$"
          example: '33879307000163'
          description: 'CNPJ do hotel'
        description:
          type: string
          minLength: 3
          example: 'Hotel à beira mar com piscina e restaurante.'
          description: 'Descrição do hotel'
        roomCount:
          type: integer
          minimum: 1
          example: 100
          description: 'Quantidade de quartos do hotel'
    RegisterHotelResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: 'Identificador único do hotel'
        hotelName:
          type: string
          example: "Hotel Atlântico"
          description: 'Nome do hotel'
        location:
          type: string
          example: "Rua Jaime Rodrigues, 123, Jd Cachoeira"
          description: 'Localização do hotel'
        phoneNumber:
          type: string
          example: "+5511999998888"
          description: 'Número de telefone do hotel'
        email:
          type: string
          example: "contato@hotelatlantico.com.br"
          description: 'Email do hotel'
        hotelType:
          $ref: '#/components/schemas/HotelType'
        npjNumber:
          type: string
          example: '33879307000163'
          description: 'CNPJ do hotel'
        description:
          type: string
          example: 'Hotel à beira mar com piscina e restaurante.'
          description: 'Descrição do hotel'
        roomCount:
          type: integer
          example: 100
          description: 'Quantidade de quartos do hotel'
        createdAt:
          type: string
          format: date-time
          example: "2023-11-14T14:00:00Z"
          description: 'Data de criação do hotel'
        updatedAt:
          type: string
          format: date-time
          example: "2023-11-14T14:00:00Z"
          description: 'Data de atualização do hotel'
    HotelType:
      type: string
      example: "HOTEL"
      description: 'Tipo do hotel'
      enum:
        - HOTEL
        - RESORT
        - HOSTEL
        - GUESTHOUSE
        - FARMSTAY
    ErrorResponse:
      type: object
      description: 'Estrutura geral de resposta a erros'
      properties:
        status:
          type: string
        error:
          type: string
        message:
          type: string